Initiera Node.js-projekt och installera TypeScript
    npm init -y
    npm install typescript ts-node @types/node --save-dev
-- 

    npm install typescript --save-dev 
Lägger till TypeScript som beroende i ditt projekt.
Gör så att kommandot tsc (TypeScript Compiler) blir tillgängligt via npx tsc.

--

Skapa en tsconfig.json (TypeScript-konfiguration)
    npx tsc --init
- Den genererar en standardfil. Ett exempel på viktig konfiguration

Installera Express (webbserver) och MongoDB-klient
    npm install express mongoose
    npm install @types/express --save-dev

Skapar en source och index
    mkdir src
    touch src/index.ts //Funkar på unix kommandon i mitt fall:
    New-Item -Path "src/index.ts" -ItemType File

För att starta programmet:
    npx ts-node src/index.ts

Men innan dess laddar vi ner MongoDB
    - https://www.mongodb.com/try/download/community

Lägga till Transaktioner

För att se olika transaktioner:
    - http://localhost:5000/api/transactions

API  testning:
    - Thunder Client, inbyggd i vscode

Headern:
    Accept: */*
    User-Agent: Thunder Client (https://www.thunderclient.com)
    Content-Type: application/json

JSON content:
    {
        "type": "expense",
        "amount": 99,
        "category": "Groceries",
        "note": "ICA food"
    }
Svar:
    {
        "type": "expense",
        "amount": 99,
        "category": "Groceries",
        "note": "ICA food",
        "_id": "685a66380715269ffaf091b4",
        "date": "2025-06-24T08:47:52.039Z",
        "__v": 0
    } 


Nästa steg: Utveckla vidare frontenden:

npx create-react-app ai-finance-frontend --template typescript
    - Jag va tvungen o uppdatera min npm
    npm install -g npm@11.4.2

    - npm uninstall -g create-react-app

    - npx create-react-app my-app eller npm create vite eller kan man skriva npm create cite@4.1.0 för välja versionen
    //Avinstallera för att sedan installera igen för att säkerställa senaste versionen. Vilket jag inteb rode ha gjort.
    - cd:a in i rätt, alltså root via:
        - cd ..
    // Ta bort den felinstallerade appen:
        - rm -r my-app
    - Göra om göra rätt:
        - npx create-react-app frontend --template typescript
    - För att köra programmet:
        - cd frontend
        - npm start //starta sidan

    - Installera axios:
            - cd frontend
            - npm install axios
                - om man vill Avinstallera
                    - npm uninstall axios

            - Axios is a promise-based HTTP client for JavaScript, often used in frontend applications (like React) to communicate with a backend server or APIs.
    - Installera: Prettier - Code formatter för set up, hjälper till med formateringen.

    - Ladda ner bootstrap för en modern css ramverk, gör applikationen mer smooth. //Optional då vi ej använder det än
        - npm i bootstrap

    Efter har fixat i frontend så saknades packages etc så vi reinstallar och gör en clean
        - Körde detta commandon:
            - Remove-Item -Recurse -Force node_modules, package-lock.json
            - npm cache clean --force //Rensa allt då gamla packages kan korrupta etc
                - Gjrode detta 2 gånger
            - npm install react-scripts@5.0.1 --save-exact //För att ladda ner exakt
            - sedan npm install
            - npm list react-scripts //Verifiera rätt version installerades

    Frontend fixad:
        - Efter uppstart kunde frontend inte ansluta sig till backenden
        - Klassisk CORS problem
        Commandon:
            - npm i cors
            - npm install --save-dev @types/cors
    
    Nästa steg:
        - Installerat: commandot:
            - npm i react-router-dom
                - för att kunna länka etc

Nästa steg: utveckla ett autentiseringssystem
    - Autentisering med JWT
        - användare kan logga in
        - varje transaktion kopplas till en användare (t.ex. userId)
        - man bara ser sina egna transaktioner

    Installera dependencies:
    - npm install express mongoose bcrypt jsonwebtoken cors dotenv
    - npm install -D @types/express @types/bcrypt @types/jsonwebtoken @types/cors @types/node ts-node typescript

    Skapa en .env fil som ska ha dina lokala filer/känsliga filer
    Generera en jwt-nyckel via kommandot:
        - openssl rand -base64 32

Frontend: Lagt till så att registrering redirection funkar nu

Backend:
    Varje användare har nu sina unika transaktioner då vi la till ett userID på varje transaktion, kopllad till usern
    
Future work:
    {Integration av TINK, för att koppla realtids transaktioner till applikationen
        Tink APIn kommer endast ha en read funktion till vårt bankkonto och den sköter allt självständigt för säkerheten.
        
        Skapat konto och hämta client id och alla andra känslig data och sätta in på .env filen.
        Skapat en secret key samt lagt in de på min .env fil. Pusha inte denna! Jag påbörjade i en branch men insåg snabbt att
        jag inte hade resurser för att kunna koppla realtidstransaktioner, det krävs någon form av produktionstillgång}

ToDo:
    - Backend: implementation av LLM bot
        - Lite research:
        - Vad jag har gjort än så länge:
        gått in på https://www.nomic.ai/gpt4all och laddat ner den, sparat softwaren här
            - C:\Users\tonny\gpt4all
            - cda in i backend och commandot:
                - pip install gpt4all
            - Använda flask och python för chatbotten eftersom python hanterar det bättre
            - Sparade chat modellen in på backend
            - python main.py för att köra igång den.
            - pip install flask-cors //ladda ner cors cross-site request för flask så att localhost:3000 kan kommunicera med localhost:5001
            - pip install pymongo för att koppla databasen till flask
            - Glömde connecta via applikationen också
            - går inte pusha filerna, då de är för stora
            - vi får ladda ner:
                -  git lfs install
            - installera alla nödvändiga: pip install flask flask-cors pymongo gpt4all

Lägga till docker:
    - docker-compose down
    - docker-compose up --build

    ladda ner detta:
        - npm install ts-node typescript @types/node --save-dev
    eftersom vi får error och att node-js tror att vi kör javascript men vi kör typescript



to start: docker-compose up --build


    - Frontend: Fixa Designen på login och register css



/register och /login routes

    JWT-tokenhantering

    middleware för skyddade endpoints?

--

frontend (React) som anropar denna backend
    ett formulär för att lägga till transaktion

    en lista som visar dem

    budgetöversikt


